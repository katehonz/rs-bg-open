import { useState, useEffect } from 'react';
import { graphqlRequest } from '../utils/graphqlClient';

export default function Inventory() {
  const [activeTab, setActiveTab] = useState('turnover');
  const [startDate, setStartDate] = useState('2025-01-01');
  const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0]);
  const [turnoverData, setTurnoverData] = useState([]);
  const [loading, setLoading] = useState(false);

  // Corrections tab state
  const [accounts, setAccounts] = useState([]);
  const [selectedAccount, setSelectedAccount] = useState(null);
  const [checkDate, setCheckDate] = useState(new Date().toISOString().split('T')[0]);
  const [corrections, setCorrections] = useState([]);
  const [correctionsLoading, setCorrectionsLoading] = useState(false);
  const [accountsLoading, setAccountsLoading] = useState(false);

  const QUANTITY_TURNOVER_QUERY = `
    query GetQuantityTurnover($companyId: Int!, $fromDate: NaiveDate!, $toDate: NaiveDate!) {
      getQuantityTurnover(companyId: $companyId, fromDate: $fromDate, toDate: $toDate) {
        accountId
        openingQuantity
        openingAmount
        receiptQuantity
        receiptAmount
        issueQuantity
        issueAmount
        closingQuantity
        closingAmount
      }
    }
  `;

  const ACCOUNTS_QUERY = `
    query GetMaterialAccounts($companyId: Int!) {
      accountHierarchy(companyId: $companyId) {
        id
        code
        name
        accountClass
        supportsQuantities
        isActive
      }
    }
  `;

  const CORRECTIONS_QUERY = `
    query CheckCorrections($companyId: Int!, $accountId: Int!, $newEntryDate: NaiveDate!) {
      checkRetroactiveCorrections(
        companyId: $companyId,
        accountId: $accountId,
        newEntryDate: $newEntryDate
      ) {
        movementId
        movementDate
        materialAccountId
        expenseAccountId
        quantity
        oldAverageCost
        newAverageCost
        correctionAmount
        description
      }
    }
  `;

  const ACCOUNT_NAME_QUERY = `
    query GetAccountName($companyId: Int!, $accountId: Int!) {
      accountHierarchy(companyId: $companyId) {
        id
        code
        name
      }
    }
  `;

  useEffect(() => {
    if (activeTab === 'corrections') {
      loadMaterialAccounts();
    }
  }, [activeTab]);

  const handleLoadTurnover = async () => {
    try {
      setLoading(true);
      const companyId = parseInt(localStorage.getItem('currentCompanyId')) || 1;

      const response = await graphqlRequest(QUANTITY_TURNOVER_QUERY, {
        companyId,
        fromDate: startDate,
        toDate: endDate
      });

      setTurnoverData(response.getQuantityTurnover || []);
    } catch (err) {
      alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ: ' + err.message);
    } finally {
      setLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('bg-BG', {
      style: 'currency',
      currency: 'BGN',
      minimumFractionDigits: 2
    }).format(amount || 0);
  };

  const formatQuantity = (qty) => {
    return new Intl.NumberFormat('bg-BG', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 6
    }).format(qty || 0);
  };

  const loadMaterialAccounts = async () => {
    try {
      setAccountsLoading(true);
      const companyId = parseInt(localStorage.getItem('currentCompanyId')) || 1;

      const data = await graphqlRequest(ACCOUNTS_QUERY, { companyId });

      const materialAccounts = (data.accountHierarchy || []).filter(acc =>
        acc.isActive && (
          acc.accountClass === 3 ||
          acc.supportsQuantities ||
          (acc.code && acc.code.startsWith('3'))
        )
      );

      setAccounts(materialAccounts);
    } catch (err) {
      alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–º–µ—Ç–∫–∏—Ç–µ: ' + err.message);
    } finally {
      setAccountsLoading(false);
    }
  };

  const checkCorrections = async () => {
    if (!selectedAccount) {
      alert('–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–Ω–∞ —Å–º–µ—Ç–∫–∞');
      return;
    }

    try {
      setCorrectionsLoading(true);
      const companyId = parseInt(localStorage.getItem('currentCompanyId')) || 1;

      const response = await graphqlRequest(CORRECTIONS_QUERY, {
        companyId,
        accountId: selectedAccount.id,
        newEntryDate: checkDate
      });

      const correctionsData = response.checkRetroactiveCorrections || [];

      if (correctionsData.length > 0) {
        const accountsData = await graphqlRequest(ACCOUNT_NAME_QUERY, { companyId });
        const accountsMap = {};
        (accountsData.accountHierarchy || []).forEach(acc => {
          accountsMap[acc.id] = acc;
        });

        const enrichedCorrections = correctionsData.map(corr => ({
          ...corr,
          materialAccountName: accountsMap[corr.materialAccountId]?.name || 'N/A',
          materialAccountCode: accountsMap[corr.materialAccountId]?.code || 'N/A',
          expenseAccountName: accountsMap[corr.expenseAccountId]?.name || 'N/A',
          expenseAccountCode: accountsMap[corr.expenseAccountId]?.code || 'N/A',
        }));

        setCorrections(enrichedCorrections);
      } else {
        setCorrections([]);
      }
    } catch (err) {
      alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞: ' + err.message);
    } finally {
      setCorrectionsLoading(false);
    }
  };

  const getTotalCorrection = () => {
    return corrections.reduce((sum, corr) => sum + parseFloat(corr.correctionAmount), 0);
  };

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">–ú–∞—Ç–µ—Ä–∏–∞–ª–Ω–∏ –∑–∞–ø–∞—Å–∏</h1>

      {/* Tabs */}
      <div className="bg-white rounded-lg shadow mb-6">
        <div className="border-b border-gray-200">
          <nav className="flex">
            <button
              onClick={() => setActiveTab('turnover')}
              className={`px-6 py-3 text-sm font-medium border-b-2 ${
                activeTab === 'turnover'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∞ –æ–±–æ—Ä–æ—Ç–Ω–∞ –≤–µ–¥–æ–º–æ—Å—Ç
            </button>
            <button
              onClick={() => setActiveTab('corrections')}
              className={`px-6 py-3 text-sm font-medium border-b-2 ${
                activeTab === 'corrections'
                  ? 'border-blue-600 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              ‚ö†Ô∏è –ö–æ—Ä–µ–∫—Ü–∏–∏ –Ω–∞ –°–ü–¶
            </button>
          </nav>
        </div>
      </div>

      {/* Turnover Tab */}
      {activeTab === 'turnover' && (
        <>
          {/* Period Selection */}
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">–ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–∞ –æ–±–æ—Ä–æ—Ç–Ω–∞ –≤–µ–¥–æ–º–æ—Å—Ç</h2>

        <div className="flex items-end gap-4 mb-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –û—Ç –¥–∞—Ç–∞
            </label>
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –î–æ –¥–∞—Ç–∞
            </label>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="px-3 py-2 border border-gray-300 rounded-md"
            />
          </div>

          <button
            onClick={handleLoadTurnover}
            disabled={loading}
            className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? '–ó–∞—Ä–µ–∂–¥–∞–Ω–µ...' : '–ü–æ–∫–∞–∂–∏'}
          </button>
        </div>
      </div>

      {/* Turnover Table */}
      {turnoverData.length > 0 && (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th rowSpan="2" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r">
                    –°–º–µ—Ç–∫–∞
                  </th>
                  <th colSpan="2" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider border-r">
                    –ù–∞—á–∞–ª–Ω–æ —Å–∞–ª–¥–æ
                  </th>
                  <th colSpan="2" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider border-r">
                    –ü–æ—Å—Ç—ä–ø–≤–∞–Ω–µ (–î—Ç)
                  </th>
                  <th colSpan="2" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider border-r">
                    –†–∞–∑—Ö–æ–¥ (–ö—Ç)
                  </th>
                  <th colSpan="2" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                    –ö—Ä–∞–π–Ω–æ —Å–∞–ª–¥–æ
                  </th>
                </tr>
                <tr>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">–ö–æ–ª-–≤–æ</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase border-r">–°—Ç–æ–π–Ω–æ—Å—Ç</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">–ö–æ–ª-–≤–æ</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase border-r">–°—Ç–æ–π–Ω–æ—Å—Ç</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">–ö–æ–ª-–≤–æ</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase border-r">–°—Ç–æ–π–Ω–æ—Å—Ç</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">–ö–æ–ª-–≤–æ</th>
                  <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">–°—Ç–æ–π–Ω–æ—Å—Ç</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {turnoverData.map((row, idx) => (
                  <tr key={idx} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 border-r">
                      {row.accountId}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                      {formatQuantity(row.openingQuantity)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 border-r">
                      {formatCurrency(row.openingAmount)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-green-600 font-medium">
                      {formatQuantity(row.receiptQuantity)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-green-600 font-medium border-r">
                      {formatCurrency(row.receiptAmount)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-red-600 font-medium">
                      {formatQuantity(row.issueQuantity)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-red-600 font-medium border-r">
                      {formatCurrency(row.issueAmount)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-semibold">
                      {formatQuantity(row.closingQuantity)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900 font-semibold">
                      {formatCurrency(row.closingAmount)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {turnoverData.length === 0 && !loading && (
        <div className="bg-white rounded-lg shadow p-12 text-center text-gray-500">
          –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ. –ò–∑–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ "–ü–æ–∫–∞–∂–∏".
        </div>
      )}
        </>
      )}

      {/* Corrections Tab */}
      {activeTab === 'corrections' && (
        <>
          <div className="bg-white rounded-lg shadow p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∫–æ—Ä–µ–∫—Ü–∏–∏</h2>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ú–∞—Ç–µ—Ä–∏–∞–ª–Ω–∞ —Å–º–µ—Ç–∫–∞
                </label>
                <select
                  value={selectedAccount?.id || ''}
                  onChange={(e) => {
                    const acc = accounts.find(a => a.id === parseInt(e.target.value));
                    setSelectedAccount(acc);
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                  disabled={accountsLoading}
                >
                  <option value="">–ò–∑–±–µ—Ä–µ—Ç–µ —Å–º–µ—Ç–∫–∞...</option>
                  {accounts.map(acc => (
                    <option key={acc.id} value={acc.id}>
                      {acc.code} - {acc.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ –∑–∞–ø–∏—Å–∏ —Å–ª–µ–¥ –¥–∞—Ç–∞
                </label>
                <input
                  type="date"
                  value={checkDate}
                  onChange={(e) => setCheckDate(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md"
                />
              </div>

              <div className="flex items-end">
                <button
                  onClick={checkCorrections}
                  disabled={correctionsLoading || !selectedAccount}
                  className="w-full px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                >
                  {correctionsLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü—Ä–æ–≤–µ—Ä–∏ –∑–∞ –∫–æ—Ä–µ–∫—Ü–∏–∏'}
                </button>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-md p-4 text-sm text-blue-800">
              <strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∏:</strong> –ò–∑–±–µ—Ä–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–Ω–∞ —Å–º–µ—Ç–∫–∞ –∏ –¥–∞—Ç–∞. –°–∏—Å—Ç–µ–º–∞—Ç–∞ —â–µ –ø—Ä–æ–≤–µ—Ä–∏ –¥–∞–ª–∏ –∏–º–∞ –∏–∑–ø–∏—Å–≤–∞–Ω–∏—è
              –°–õ–ï–î —Ç–∞–∑–∏ –¥–∞—Ç–∞, –∫–æ–∏—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–∞—Ç –∫–æ—Ä–∏–≥–∏—Ä–∞–Ω–∏ –∑–∞—Ä–∞–¥–∏ –ø—Ä–æ–º—è–Ω–∞ –≤ —Å—Ä–µ–¥–Ω–æ –ø—Ä–µ—Ç–µ–≥–ª–µ–Ω–∞—Ç–∞ —Ü–µ–Ω–∞.
            </div>
          </div>

          {/* Results */}
          {corrections.length > 0 && (
            <div className="bg-white rounded-lg shadow overflow-hidden mb-6">
              <div className="px-6 py-4 bg-yellow-50 border-b border-yellow-200">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold text-yellow-900">
                      ‚ö†Ô∏è –û—Ç–∫—Ä–∏—Ç–∏ {corrections.length} –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –∫–æ—Ä–µ–∫—Ü–∏—è
                    </h3>
                    <p className="text-sm text-yellow-800 mt-1">
                      –°–ª–µ–¥–Ω–∏—Ç–µ –∏–∑–ø–∏—Å–≤–∞–Ω–∏—è —Å–∞ –Ω–∞–ø—Ä–∞–≤–µ–Ω–∏ —Å –Ω–µ–≤—è—Ä–Ω–∞ –°–ü–¶ –∏ —Ç—Ä—è–±–≤–∞ –¥–∞ –±—ä–¥–∞—Ç –∫–æ—Ä–∏–≥–∏—Ä–∞–Ω–∏
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="text-sm text-gray-600">–û–±—â–∞ –∫–æ—Ä–µ–∫—Ü–∏—è:</div>
                    <div className={`text-2xl font-bold ${getTotalCorrection() >= 0 ? 'text-red-600' : 'text-green-600'}`}>
                      {formatCurrency(Math.abs(getTotalCorrection()))}
                      {getTotalCorrection() >= 0 ? ' ‚Üë' : ' ‚Üì'}
                    </div>
                  </div>
                </div>
              </div>

              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –î–∞—Ç–∞
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ö–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏—è
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –°—Ç–∞—Ä–∞ –°–ü–¶
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ù–æ–≤–∞ –°–ü–¶
                      </th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ö–æ—Ä–µ–∫—Ü–∏—è
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        –ö–æ—Ä–∏–≥–∏—Ä–∞—â –∑–∞–ø–∏—Å
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {corrections.map((corr, idx) => {
                      const isPositive = parseFloat(corr.correctionAmount) >= 0;
                      return (
                        <tr key={idx} className="hover:bg-gray-50">
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {corr.movementDate}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900">
                            <div className="font-medium">
                              –î—Ç {corr.expenseAccountCode} / –ö—Ç {corr.materialAccountCode}
                            </div>
                            <div className="text-xs text-gray-600">
                              {corr.expenseAccountName}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                            {formatQuantity(corr.quantity)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-right text-gray-900">
                            {formatCurrency(corr.oldAverageCost)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-right font-medium text-blue-600">
                            {formatCurrency(corr.newAverageCost)}
                          </td>
                          <td className={`px-6 py-4 whitespace-nowrap text-sm text-right font-bold ${
                            isPositive ? 'text-red-600' : 'text-green-600'
                          }`}>
                            {formatCurrency(Math.abs(corr.correctionAmount))}
                            {isPositive ? ' ‚Üë' : ' ‚Üì'}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900">
                            <div className={`font-mono ${isPositive ? 'text-red-600' : 'text-green-600'}`}>
                              {isPositive ? (
                                <>
                                  <div>–î—Ç {corr.expenseAccountCode}</div>
                                  <div>–ö—Ç {corr.materialAccountCode}</div>
                                  <div className="font-bold">{formatCurrency(corr.correctionAmount)}</div>
                                </>
                              ) : (
                                <>
                                  <div>–î—Ç {corr.expenseAccountCode} (-)</div>
                                  <div>–ö—Ç {corr.materialAccountCode} (-)</div>
                                  <div className="font-bold">{formatCurrency(Math.abs(corr.correctionAmount))} —Å—Ç–æ—Ä–Ω–æ</div>
                                </>
                              )}
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>

              <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="text-sm text-gray-600">
                    <strong>–ó–∞–±–µ–ª–µ–∂–∫–∞:</strong> –ö–æ—Ä–∏–≥–∏—Ä–∞—â–∏—Ç–µ –∑–∞–ø–∏—Å–∏ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –Ω–∞–ø—Ä–∞–≤—è—Ç —Ä—ä—á–Ω–æ –≤ –¥–Ω–µ–≤–Ω–∏–∫–∞.
                    –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∞—Ç–∞ –∫–æ—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏—è –∏ —Å—É–º–∏.
                  </div>
                  <button
                    onClick={() => window.print()}
                    className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
                  >
                    üñ®Ô∏è –ü–µ—á–∞—Ç
                  </button>
                </div>
              </div>
            </div>
          )}

          {corrections.length === 0 && !correctionsLoading && selectedAccount && (
            <div className="bg-white rounded-lg shadow p-12 text-center">
              <div className="text-6xl mb-4">‚úÖ</div>
              <div className="text-xl font-semibold text-green-600 mb-2">
                –ù—è–º–∞ –Ω—É–∂–¥–∞ –æ—Ç –∫–æ—Ä–µ–∫—Ü–∏–∏
              </div>
              <div className="text-gray-600">
                –í—Å–∏—á–∫–∏ –∏–∑–ø–∏—Å–≤–∞–Ω–∏—è —Å–ª–µ–¥ {checkDate} —Å–∞ —Å –ø—Ä–∞–≤–∏–ª–Ω–∞ –°–ü–¶
              </div>
            </div>
          )}

          {!selectedAccount && !correctionsLoading && (
            <div className="bg-white rounded-lg shadow p-12 text-center text-gray-500">
              –ò–∑–±–µ—Ä–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª–Ω–∞ —Å–º–µ—Ç–∫–∞ –∏ –¥–∞—Ç–∞ –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞
            </div>
          )}
        </>
      )}
    </div>
  );
}
