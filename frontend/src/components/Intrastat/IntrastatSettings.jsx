import React, { useState } from 'react';
import { useQuery, useMutation } from '@apollo/client';
import { gql } from '@apollo/client';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  Button,
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  Input,
  Switch,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  Badge,
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  toast
} from '../ui';
import { Settings, Plus, Trash2, Upload, Download } from 'lucide-react';
import { useForm } from 'react-hook-form';

const GET_INTRASTAT_SETTINGS = gql`
  query GetIntrastatSettings($companyId: Int!) {
    intrastatSettings(companyId: $companyId) {
      id
      companyId
      isEnabled
      arrivalThresholdBgn
      dispatchThresholdBgn
      currentArrivalThresholdBgn
      currentDispatchThresholdBgn
      autoGenerateDeclarations
      defaultTransportMode
      defaultDeliveryTerms
      defaultTransactionNature
      responsiblePersonName
      responsiblePersonPhone
      responsiblePersonEmail
    }
  }
`;

const GET_ACCOUNT_MAPPINGS = gql`
  query GetAccountMappings($companyId: Int!) {
    intrastatAccountMappings(companyId: $companyId) {
      id
      accountId
      nomenclatureId
      flowDirection
      transactionNatureCode
      isQuantityTracked
      defaultCountryCode
      defaultTransportMode
      isOptional
      minThresholdBgn
      account {
        id
        code
        name
      }
      nomenclature {
        id
        cnCode
        descriptionBg
        unitOfMeasure
      }
    }
  }
`;

const GET_NOMENCLATURES = gql`
  query GetNomenclatures($search: String, $limit: Int) {
    intrastatNomenclatures(search: $search, limit: $limit) {
      id
      cnCode
      descriptionBg
      unitOfMeasure
      unitDescription
    }
  }
`;

const UPDATE_SETTINGS = gql`
  mutation UpdateSettings($id: Int!, $input: UpdateIntrastatSettingsInput!) {
    updateIntrastatSettings(id: $id, input: $input) {
      id
      isEnabled
      arrivalThresholdBgn
      dispatchThresholdBgn
    }
  }
`;

const CREATE_ACCOUNT_MAPPING = gql`
  mutation CreateAccountMapping($input: CreateIntrastatAccountMappingInput!) {
    createIntrastatAccountMapping(input: $input) {
      id
      accountId
      nomenclatureId
      flowDirection
    }
  }
`;

const DELETE_ACCOUNT_MAPPING = gql`
  mutation DeleteAccountMapping($id: Int!) {
    deleteIntrastatAccountMapping(id: $id)
  }
`;

const IMPORT_NOMENCLATURE = gql`
  mutation ImportNomenclature($csvData: String!) {
    importIntrastatNomenclature(csvData: $csvData) {
      success
      importedCount
      message
    }
  }
`;

const IntrastatSettings = ({ companyId }) => {
  const [showMappingDialog, setShowMappingDialog] = useState(false);
  const [searchNomenclature, setSearchNomenclature] = useState('');
  
  const form = useForm();
  const mappingForm = useForm();

  const { data: settingsData, loading: settingsLoading, refetch: refetchSettings } = useQuery(GET_INTRASTAT_SETTINGS, {
    variables: { companyId }
  });

  const { data: mappingsData, loading: mappingsLoading, refetch: refetchMappings } = useQuery(GET_ACCOUNT_MAPPINGS, {
    variables: { companyId }
  });

  const { data: nomenclatureData } = useQuery(GET_NOMENCLATURES, {
    variables: { search: searchNomenclature, limit: 50 },
    skip: searchNomenclature.length < 2
  });

  const [updateSettings] = useMutation(UPDATE_SETTINGS, {
    onCompleted: () => {
      toast({
        title: "Успех",
        description: "Настройките са запазени успешно"
      });
      refetchSettings();
    },
    onError: (error) => {
      toast({
        title: "Грешка",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const [createMapping] = useMutation(CREATE_ACCOUNT_MAPPING, {
    onCompleted: () => {
      toast({
        title: "Успех",
        description: "Свързването е създадено успешно"
      });
      setShowMappingDialog(false);
      mappingForm.reset();
      refetchMappings();
    },
    onError: (error) => {
      toast({
        title: "Грешка",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const [deleteMapping] = useMutation(DELETE_ACCOUNT_MAPPING, {
    onCompleted: () => {
      toast({
        title: "Успех",
        description: "Свързването е изтрито успешно"
      });
      refetchMappings();
    }
  });

  const [importNomenclature] = useMutation(IMPORT_NOMENCLATURE, {
    onCompleted: (data) => {
      toast({
        title: "Успех",
        description: data.importIntrastatNomenclature.message
      });
    },
    onError: (error) => {
      toast({
        title: "Грешка",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const onSubmitSettings = (data) => {
    if (settingsData?.intrastatSettings?.id) {
      updateSettings({
        variables: {
          id: settingsData.intrastatSettings.id,
          input: {
            isEnabled: data.isEnabled,
            arrivalThresholdBgn: parseFloat(data.arrivalThresholdBgn),
            dispatchThresholdBgn: parseFloat(data.dispatchThresholdBgn),
            autoGenerateDeclarations: data.autoGenerateDeclarations,
            defaultTransportMode: data.defaultTransportMode ? parseInt(data.defaultTransportMode) : null,
            defaultDeliveryTerms: data.defaultDeliveryTerms,
            defaultTransactionNature: data.defaultTransactionNature,
            responsiblePersonName: data.responsiblePersonName,
            responsiblePersonPhone: data.responsiblePersonPhone,
            responsiblePersonEmail: data.responsiblePersonEmail
          }
        }
      });
    }
  };

  const onSubmitMapping = (data) => {
    createMapping({
      variables: {
        input: {
          accountId: parseInt(data.accountId),
          nomenclatureId: parseInt(data.nomenclatureId),
          flowDirection: data.flowDirection,
          transactionNatureCode: data.transactionNatureCode,
          isQuantityTracked: data.isQuantityTracked || true,
          defaultCountryCode: data.defaultCountryCode,
          defaultTransportMode: data.defaultTransportMode ? parseInt(data.defaultTransportMode) : null,
          isOptional: data.isOptional || true,
          minThresholdBgn: data.minThresholdBgn ? parseFloat(data.minThresholdBgn) : null,
          companyId
        }
      }
    });
  };

  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    if (file && file.type === 'text/csv') {
      const reader = new FileReader();
      reader.onload = (e) => {
        const csvData = e.target.result;
        importNomenclature({
          variables: { csvData }
        });
      };
      reader.readAsText(file);
    } else {
      toast({
        title: "Грешка",
        description: "Моля, изберете CSV файл",
        variant: "destructive"
      });
    }
  };

  const exportMappingsToCSV = () => {
    const mappings = mappingsData?.intrastatAccountMappings || [];
    const csvContent = [
      "Код сметка,Име сметка,CN код,Описание,Посока,Вид сделка,Следене количества,Страна по подр,Транспорт,Опционално,Мин.праг",
      ...mappings.map(m => [
        m.account?.code,
        m.account?.name,
        m.nomenclature?.cnCode,
        m.nomenclature?.descriptionBg,
        m.flowDirection === 'ARRIVAL' ? 'Входящи' : 'Изходящи',
        m.transactionNatureCode,
        m.isQuantityTracked ? 'Да' : 'Не',
        m.defaultCountryCode || '',
        m.defaultTransportMode || '',
        m.isOptional ? 'Да' : 'Не',
        m.minThresholdBgn || ''
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `intrastat_mappings_${new Date().getTime()}.csv`;
    link.click();
    URL.revokeObjectURL(link.href);
  };

  if (settingsLoading || mappingsLoading) {
    return <div className="flex justify-center items-center h-64">Зареждане...</div>;
  }

  const settings = settingsData?.intrastatSettings;
  const mappings = mappingsData?.intrastatAccountMappings || [];
  const nomenclatures = nomenclatureData?.intrastatNomenclatures || [];

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold flex items-center gap-2">
          <Settings className="w-8 h-8" />
          INTRASTAT Настройки
        </h1>
      </div>

      <Tabs defaultValue="general">
        <TabsList>
          <TabsTrigger value="general">Общи настройки</TabsTrigger>
          <TabsTrigger value="mappings">Свързване сметки</TabsTrigger>
          <TabsTrigger value="nomenclature">Номенклатура</TabsTrigger>
        </TabsList>

        <TabsContent value="general">
          <Card>
            <CardHeader>
              <CardTitle>Основни настройки</CardTitle>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmitSettings)} className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="isEnabled"
                      defaultValue={settings?.isEnabled}
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Активиране на модула</FormLabel>
                            <div className="text-[0.8rem] text-muted-foreground">
                              Включва INTRASTAT функционалността
                            </div>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="autoGenerateDeclarations"
                      defaultValue={settings?.autoGenerateDeclarations}
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Автоматично генериране</FormLabel>
                            <div className="text-[0.8rem] text-muted-foreground">
                              Създава декларации автоматично
                            </div>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <FormField
                      control={form.control}
                      name="arrivalThresholdBgn"
                      defaultValue={settings?.arrivalThresholdBgn}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Праг за входящи (BGN)</FormLabel>
                          <FormControl>
                            <Input type="number" step="0.01" placeholder="400000.00" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="dispatchThresholdBgn"
                      defaultValue={settings?.dispatchThresholdBgn}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Праг за изходящи (BGN)</FormLabel>
                          <FormControl>
                            <Input type="number" step="0.01" placeholder="400000.00" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <FormField
                      control={form.control}
                      name="defaultTransportMode"
                      defaultValue={settings?.defaultTransportMode}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Транспорт по подразбиране</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value?.toString()}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Изберете" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="1">1 - Морски транспорт</SelectItem>
                              <SelectItem value="2">2 - Железопътен транспорт</SelectItem>
                              <SelectItem value="3">3 - Автомобилен транспорт</SelectItem>
                              <SelectItem value="4">4 - Въздушен транспорт</SelectItem>
                              <SelectItem value="5">5 - Пощенски пратки</SelectItem>
                              <SelectItem value="7">7 - Тръбни инсталации</SelectItem>
                              <SelectItem value="8">8 - Вътрешен воден транспорт</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="defaultDeliveryTerms"
                      defaultValue={settings?.defaultDeliveryTerms}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Условия за доставка</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Изберете" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="EXW">EXW - Ex Works</SelectItem>
                              <SelectItem value="FCA">FCA - Free Carrier</SelectItem>
                              <SelectItem value="CPT">CPT - Carriage Paid To</SelectItem>
                              <SelectItem value="CIP">CIP - Carriage and Insurance Paid</SelectItem>
                              <SelectItem value="DAT">DAT - Delivered at Terminal</SelectItem>
                              <SelectItem value="DAP">DAP - Delivered at Place</SelectItem>
                              <SelectItem value="DDP">DDP - Delivered Duty Paid</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="defaultTransactionNature"
                      defaultValue={settings?.defaultTransactionNature}
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Вид сделка по подразбиране</FormLabel>
                          <Select onValueChange={field.onChange} defaultValue={field.value}>
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Изберете" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="11">11 - Незабавна продажба/покупка</SelectItem>
                              <SelectItem value="12">12 - Пряка търговия със/от частни потребители</SelectItem>
                              <SelectItem value="21">21 - Връщане на стоки</SelectItem>
                              <SelectItem value="22">22 - Замяна на върнати стоки</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold">Отговорно лице</h3>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <FormField
                        control={form.control}
                        name="responsiblePersonName"
                        defaultValue={settings?.responsiblePersonName}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Име и фамилия</FormLabel>
                            <FormControl>
                              <Input placeholder="Иван Иванов" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="responsiblePersonPhone"
                        defaultValue={settings?.responsiblePersonPhone}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Телефон</FormLabel>
                            <FormControl>
                              <Input placeholder="+359 2 123 4567" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />

                      <FormField
                        control={form.control}
                        name="responsiblePersonEmail"
                        defaultValue={settings?.responsiblePersonEmail}
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Имейл</FormLabel>
                            <FormControl>
                              <Input type="email" placeholder="ivan@company.bg" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>

                  <div className="flex justify-end">
                    <Button type="submit">Запази настройките</Button>
                  </div>
                </form>
              </Form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="mappings">
          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Свързване на сметки с номенклатура</span>
                <div className="flex gap-2">
                  <Button variant="outline" size="sm" onClick={exportMappingsToCSV}>
                    <Download className="w-4 h-4 mr-2" />
                    Експорт
                  </Button>
                  <Dialog open={showMappingDialog} onOpenChange={setShowMappingDialog}>
                    <DialogTrigger asChild>
                      <Button size="sm">
                        <Plus className="w-4 h-4 mr-2" />
                        Добави свързване
                      </Button>
                    </DialogTrigger>
                    <DialogContent className="max-w-2xl">
                      <DialogHeader>
                        <DialogTitle>Ново свързване сметка - номенклатура</DialogTitle>
                      </DialogHeader>
                      <Form {...mappingForm}>
                        <form onSubmit={mappingForm.handleSubmit(onSubmitMapping)} className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <FormField
                              control={mappingForm.control}
                              name="accountId"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Сметка</FormLabel>
                                  <FormControl>
                                    <Input placeholder="ID на сметка" {...field} />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />

                            <FormField
                              control={mappingForm.control}
                              name="flowDirection"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Посока</FormLabel>
                                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder="Изберете" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="ARRIVAL">Входящи</SelectItem>
                                      <SelectItem value="DISPATCH">Изходящи</SelectItem>
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div>

                          <FormField
                            control={mappingForm.control}
                            name="nomenclatureId"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Номенклатура</FormLabel>
                                <div className="space-y-2">
                                  <Input 
                                    placeholder="Търсене на номенклатура..."
                                    value={searchNomenclature}
                                    onChange={(e) => setSearchNomenclature(e.target.value)}
                                  />
                                  {nomenclatures.length > 0 && (
                                    <Select onValueChange={field.onChange}>
                                      <FormControl>
                                        <SelectTrigger>
                                          <SelectValue placeholder="Изберете номенклатура" />
                                        </SelectTrigger>
                                      </FormControl>
                                      <SelectContent>
                                        {nomenclatures.map(nom => (
                                          <SelectItem key={nom.id} value={nom.id.toString()}>
                                            {nom.cnCode} - {nom.descriptionBg}
                                          </SelectItem>
                                        ))}
                                      </SelectContent>
                                    </Select>
                                  )}
                                </div>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          <div className="grid grid-cols-2 gap-4">
                            <FormField
                              control={mappingForm.control}
                              name="transactionNatureCode"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Вид сделка</FormLabel>
                                  <FormControl>
                                    <Input placeholder="11" {...field} />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />

                            <FormField
                              control={mappingForm.control}
                              name="defaultCountryCode"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>Страна по подразбиране</FormLabel>
                                  <FormControl>
                                    <Input placeholder="DE" {...field} />
                                  </FormControl>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div>

                          <div className="flex justify-end gap-2">
                            <Button variant="outline" type="button" onClick={() => setShowMappingDialog(false)}>
                              Отказ
                            </Button>
                            <Button type="submit">Създай</Button>
                          </div>
                        </form>
                      </Form>
                    </DialogContent>
                  </Dialog>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Сметка</TableHead>
                    <TableHead>CN Код</TableHead>
                    <TableHead>Описание</TableHead>
                    <TableHead>Посока</TableHead>
                    <TableHead>Вид сделка</TableHead>
                    <TableHead>Опционално</TableHead>
                    <TableHead>Действия</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {mappings.map(mapping => (
                    <TableRow key={mapping.id}>
                      <TableCell>
                        <div>
                          <div className="font-mono">{mapping.account?.code}</div>
                          <div className="text-sm text-muted-foreground">{mapping.account?.name}</div>
                        </div>
                      </TableCell>
                      <TableCell className="font-mono">{mapping.nomenclature?.cnCode}</TableCell>
                      <TableCell>
                        <div className="max-w-xs truncate" title={mapping.nomenclature?.descriptionBg}>
                          {mapping.nomenclature?.descriptionBg}
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge variant={mapping.flowDirection === 'ARRIVAL' ? 'default' : 'outline'}>
                          {mapping.flowDirection === 'ARRIVAL' ? 'Входящи' : 'Изходящи'}
                        </Badge>
                      </TableCell>
                      <TableCell>{mapping.transactionNatureCode}</TableCell>
                      <TableCell>
                        <Badge variant={mapping.isOptional ? 'secondary' : 'default'}>
                          {mapping.isOptional ? 'Да' : 'Не'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Button
                          variant="destructive"
                          size="sm"
                          onClick={() => deleteMapping({ variables: { id: mapping.id } })}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))}
                  {mappings.length === 0 && (
                    <TableRow>
                      <TableCell colSpan={7} className="text-center text-muted-foreground py-8">
                        Няма настроени свързвания
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="nomenclature">
          <Card>
            <CardHeader>
              <CardTitle className="flex justify-between items-center">
                <span>Управление на номенклатура</span>
                <div className="flex gap-2">
                  <label htmlFor="csv-upload">
                    <Button variant="outline" size="sm" asChild>
                      <span>
                        <Upload className="w-4 h-4 mr-2" />
                        Импорт CSV
                      </span>
                    </Button>
                  </label>
                  <input
                    id="csv-upload"
                    type="file"
                    accept=".csv"
                    onChange={handleFileUpload}
                    className="hidden"
                  />
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="text-sm text-muted-foreground">
                  <p>CSV файлът трябва да съдържа следните колони:</p>
                  <ul className="list-disc list-inside mt-2">
                    <li>CN код (8 цифри)</li>
                    <li>Описание на български</li>
                    <li>Мерна единица</li>
                    <li>Описание на мерната единица</li>
                  </ul>
                </div>
                
                <div className="p-4 bg-muted rounded-lg">
                  <h4 className="font-semibold mb-2">Пример за CSV формат:</h4>
                  <pre className="text-sm">
{`84832000,Лагери с търкалящи се елементи,p/st,бройки
84833000,Лагери със плъзгащи се елементи,p/st,бройки
85011000,Електрически двигатели с мощност не повече от 37,5 W,p/st,бройки`}
                  </pre>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default IntrastatSettings;