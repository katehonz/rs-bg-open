import React, { useState } from 'react';
import { useQuery, useMutation } from '@apollo/client';
import { gql } from '@apollo/client';
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle,
  Button,
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
  Alert,
  AlertDescription,
  Badge,
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  Input,
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
  Checkbox,
  toast
} from '../ui';

const GET_INTRASTAT_SETTINGS = gql`
  query GetIntrastatSettings($companyId: Int!) {
    intrastatSettings(companyId: $companyId) {
      id
      companyId
      isEnabled
      arrivalThresholdBgn
      dispatchThresholdBgn
      currentArrivalThresholdBgn
      currentDispatchThresholdBgn
      autoGenerateDeclarations
      defaultTransportMode
      defaultDeliveryTerms
      defaultTransactionNature
      responsiblePersonName
      responsiblePersonPhone
      responsiblePersonEmail
    }
  }
`;

const GET_DECLARATIONS = gql`
  query GetDeclarations($companyId: Int!, $year: Int, $month: Int) {
    intrastatDeclarations(companyId: $companyId, year: $year, month: $month) {
      id
      declarationType
      referencePeriod
      year
      month
      declarationNumber
      totalItems
      totalStatisticalValue
      totalInvoiceValue
      status
      submissionDate
    }
  }
`;

const CHECK_THRESHOLD = gql`
  query CheckThreshold($companyId: Int!) {
    checkIntrastatThreshold(companyId: $companyId) {
      arrivalExceeded
      dispatchExceeded
    }
  }
`;

const CREATE_DECLARATION = gql`
  mutation CreateDeclaration($input: CreateIntrastatDeclarationInput!) {
    createIntrastatDeclaration(input: $input) {
      id
      declarationType
      year
      month
      status
    }
  }
`;

const EXPORT_XML = gql`
  mutation ExportXml($declarationId: Int!) {
    exportIntrastatXml(declarationId: $declarationId)
  }
`;

const IntrastatDashboard = ({ companyId }) => {
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const [declarationType, setDeclarationType] = useState('ARRIVAL');

  const { data: settingsData, loading: settingsLoading } = useQuery(GET_INTRASTAT_SETTINGS, {
    variables: { companyId }
  });

  const { data: declarationsData, loading: declarationsLoading, refetch: refetchDeclarations } = useQuery(GET_DECLARATIONS, {
    variables: { companyId, year: selectedYear, month: selectedMonth }
  });

  const { data: thresholdData } = useQuery(CHECK_THRESHOLD, {
    variables: { companyId }
  });

  const [createDeclaration] = useMutation(CREATE_DECLARATION, {
    onCompleted: () => {
      toast({
        title: "Успех",
        description: "Декларацията е създадена успешно"
      });
      setShowCreateDialog(false);
      refetchDeclarations();
    },
    onError: (error) => {
      toast({
        title: "Грешка",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const [exportXml] = useMutation(EXPORT_XML, {
    onCompleted: (data) => {
      const blob = new Blob([data.exportIntrastatXml], { type: 'text/xml' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `intrastat_${selectedYear}_${selectedMonth}.xml`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "Успех",
        description: "XML файлът е експортиран успешно"
      });
    },
    onError: (error) => {
      toast({
        title: "Грешка",
        description: error.message,
        variant: "destructive"
      });
    }
  });

  const handleCreateDeclaration = () => {
    createDeclaration({
      variables: {
        input: {
          companyId,
          declarationType,
          year: selectedYear,
          month: selectedMonth,
          declarantEik: settingsData?.intrastatSettings?.responsiblePersonName || '',
          declarantName: settingsData?.intrastatSettings?.responsiblePersonName || '',
          contactPerson: settingsData?.intrastatSettings?.responsiblePersonName || '',
          contactPhone: settingsData?.intrastatSettings?.responsiblePersonPhone || '',
          contactEmail: settingsData?.intrastatSettings?.responsiblePersonEmail || ''
        }
      }
    });
  };

  const handleExportXml = (declarationId) => {
    exportXml({
      variables: { declarationId }
    });
  };

  const getStatusBadge = (status) => {
    const variants = {
      DRAFT: 'secondary',
      SUBMITTED: 'default',
      ACCEPTED: 'success',
      REJECTED: 'destructive'
    };
    
    const labels = {
      DRAFT: 'Чернова',
      SUBMITTED: 'Подадена',
      ACCEPTED: 'Приета',
      REJECTED: 'Отхвърлена'
    };

    return (
      <Badge variant={variants[status]}>
        {labels[status]}
      </Badge>
    );
  };

  if (settingsLoading || declarationsLoading) {
    return <div>Зареждане...</div>;
  }

  const settings = settingsData?.intrastatSettings;
  const declarations = declarationsData?.intrastatDeclarations || [];
  const threshold = thresholdData?.checkIntrastatThreshold;

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold">INTRASTAT Модул</h1>
        <Button onClick={() => setShowCreateDialog(true)}>
          Нова декларация
        </Button>
      </div>

      {threshold && (threshold.arrivalExceeded || threshold.dispatchExceeded) && (
        <Alert>
          <AlertDescription>
            Внимание! Прагът за INTRASTAT декларации е надвишен за:
            {threshold.arrivalExceeded && ' Пристигания'}
            {threshold.dispatchExceeded && ' Изпращания'}
          </AlertDescription>
        </Alert>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Статус на модула</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Активен:</span>
                <Badge variant={settings?.isEnabled ? 'success' : 'secondary'}>
                  {settings?.isEnabled ? 'Да' : 'Не'}
                </Badge>
              </div>
              <div className="flex justify-between">
                <span>Автоматично генериране:</span>
                <Badge variant={settings?.autoGenerateDeclarations ? 'success' : 'secondary'}>
                  {settings?.autoGenerateDeclarations ? 'Да' : 'Не'}
                </Badge>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Прагове (BGN)</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              <div className="flex justify-between">
                <span>Пристигания:</span>
                <span className="font-mono">
                  {Number(settings?.currentArrivalThresholdBgn || 0).toLocaleString()} / 
                  {Number(settings?.arrivalThresholdBgn || 0).toLocaleString()}
                </span>
              </div>
              <div className="flex justify-between">
                <span>Изпращания:</span>
                <span className="font-mono">
                  {Number(settings?.currentDispatchThresholdBgn || 0).toLocaleString()} / 
                  {Number(settings?.dispatchThresholdBgn || 0).toLocaleString()}
                </span>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Отговорно лице</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-1 text-sm">
              <p>{settings?.responsiblePersonName || 'Не е посочено'}</p>
              <p className="text-muted-foreground">{settings?.responsiblePersonPhone}</p>
              <p className="text-muted-foreground">{settings?.responsiblePersonEmail}</p>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Декларации за {selectedYear}/{String(selectedMonth).padStart(2, '0')}</CardTitle>
          <div className="flex gap-2">
            <Select value={selectedYear.toString()} onValueChange={(v) => setSelectedYear(Number(v))}>
              <SelectTrigger className="w-[120px]">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {[2023, 2024, 2025].map(year => (
                  <SelectItem key={year} value={year.toString()}>{year}</SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Select value={selectedMonth.toString()} onValueChange={(v) => setSelectedMonth(Number(v))}>
              <SelectTrigger className="w-[120px]">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {Array.from({ length: 12 }, (_, i) => i + 1).map(month => (
                  <SelectItem key={month} value={month.toString()}>
                    {String(month).padStart(2, '0')}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Тип</TableHead>
                <TableHead>Период</TableHead>
                <TableHead>Артикули</TableHead>
                <TableHead>Стойност (BGN)</TableHead>
                <TableHead>Статус</TableHead>
                <TableHead>Действия</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {declarations.map(declaration => (
                <TableRow key={declaration.id}>
                  <TableCell>
                    <Badge variant={declaration.declarationType === 'ARRIVAL' ? 'default' : 'outline'}>
                      {declaration.declarationType === 'ARRIVAL' ? 'Пристигания' : 'Изпращания'}
                    </Badge>
                  </TableCell>
                  <TableCell>{declaration.referencePeriod}</TableCell>
                  <TableCell>{declaration.totalItems}</TableCell>
                  <TableCell className="font-mono">
                    {Number(declaration.totalInvoiceValue).toLocaleString()}
                  </TableCell>
                  <TableCell>{getStatusBadge(declaration.status)}</TableCell>
                  <TableCell>
                    <div className="flex gap-2">
                      <Button size="sm" variant="outline">
                        Преглед
                      </Button>
                      <Button 
                        size="sm" 
                        variant="outline"
                        onClick={() => handleExportXml(declaration.id)}
                      >
                        XML
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
              {declarations.length === 0 && (
                <TableRow>
                  <TableCell colSpan={6} className="text-center text-muted-foreground">
                    Няма декларации за избрания период
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Създаване на нова декларация</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">Тип декларация</label>
              <Select value={declarationType} onValueChange={setDeclarationType}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="ARRIVAL">Пристигания</SelectItem>
                  <SelectItem value="DISPATCH">Изпращания</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div>
              <label className="text-sm font-medium">Период</label>
              <div className="text-lg font-mono">
                {selectedYear}/{String(selectedMonth).padStart(2, '0')}
              </div>
            </div>
            <div className="flex justify-end gap-2">
              <Button variant="outline" onClick={() => setShowCreateDialog(false)}>
                Отказ
              </Button>
              <Button onClick={handleCreateDeclaration}>
                Създай
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default IntrastatDashboard;
